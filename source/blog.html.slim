---
title: Blog post layout - v1
---

.main-container
  .content
    .blog-v1.container
      .section
        .post
          .post-hero
            img src='http://placehold.it/800x400'
          = link_to '#' do
            h1.title
              | BeerThink: infinite scrolling in a mobile app with Ionic, Node.js, and RethinkDB

          .post-byline
            = link_to '#', class: 'avatar' do
              img src='http://placehold.it/50x50'
              | Ryan Paul
            span.post-timestamp October 07.2014

            ul.post-tags
              li
                = link_to 'Node.js', '#'
              li
                = link_to 'mobile', '#'
              li
                = link_to 'Ionic', '#'
              li
                = link_to 'beer', '#'

            ul.post-toc
              li
                = link_to '#' do
                  | Content &#x25BE;

          .post-body
            hr
            p.post-intro
              | Developers often use pagination to display large collections of data. An application can fetch content in batches as needed, presenting a fixed number of records at a time. On the frontend, paginated user interfaces typically provide something like "next" and "previous" navigation buttons so that users can move through the data set. In modern mobile apps, it is increasingly common to implement an infinite scrolling user interface on top of paginated data. As the user scrolls through a list, the application fetches and appends new records.

            p
              | To demonstrate the use of pagination in RethinkDB applications, I made a simple mobile app called

              = link_to ' BeerThink', '#'

              | . It displays a list of beers and breweries, providing a detailed summary when the user taps an item. The app uses a data dump from the

              = link_to ' Open Beer Database', '#'

              | , which contains information about roughly 4,400 beers and 1,200 breweries. I converted the data to JSON so that it is easy to import into RethinkDB. There are two tables, one for beers and one for breweries. The application uses RethinkDB's support for table joins to correlate the beers with their respective breweries.

            p  BeerThink's backend is built with Node.js and Express. It exposes beer and brewery data retrieved from a RethinkDB database, providing a paginated API that returns 50 records at a time.

            p
              | The BeerThink frontend is built with

              = link_to ' Ionic', '#'

              | , a popular AngularJS-based JavaScript framework designed for mobile web apps. BeerThink uses an infinite scrolling list to present the beers in alphabetical order.

            p BeerThink's architecture aligns with the API-first approach used by many modern mobile web applications. The backend is solely an API layer, completely decoupled from the frontend. The frontend is a single-page web application designed to consumes the backend API. This particular approach makes it easy to build multiple frontend experiences on top of the same backend. You could, for example, easily make native desktop and mobile applications that consume the same backend API.

            p This tutorial demonstrates how BeerThink's pagination works at each layer of the stack: the RethinkDB database, the Node backend, and the Ionic client application.

            .post-media
              img src='http://rethinkdb.com/assets/images/posts/2014-10-07-beerlist.png'
              img src='http://rethinkdb.com/assets/images/posts/2014-10-07-beerdetail.png'

            h2.section-title Efficient pagination in RethinkDB
            p
              | If you'd like to follow along and try the pagination queries yourself, create a table and then use the
              code r.http
              |  command to add the beer list to a database:

            .highlight
              pre
                code.javascript.language-javascript data-lang='javascript'
                  span.nx
                    | r
                  span.p
                    | .
                  span.nx
                    | table
                  span.p
                    | (
                  span.s2
                    | "beers"
                  span.p
                    | ).
                  span.nx
                    | insert
                  span.p
                    | (
                  span.nx
                    | r
                  span.p
                    | .
                  span.nx
                    | http
                  span.p
                    | (
                  span.s2
                    | "https://raw.githubusercontent.com/rethinkdb/beerthink/master/data/beers.json"
                  span.p
                    | ,
                  span.p
                    |  {
                  span.nx
                    | result_format
                  span.o
                    | :
                  span.s2
                    |  "json"
                  span.p
                    | }))

            p To efficiently alphabetize and paginate the beer list, you first need to create an index on the name property:

            .highlight
              pre
                code.javascript.language-javascript data-lang='javascript'
                  span.nx
                    | r
                  span.p
                    | .
                  span.nx
                    | tablet
                  span.p
                    | (
                  span.s2
                    | "beers"
                  span.p
                    | ).
                  span.nx
                    | indexCreate
                  span.p
                    | (
                  span.s2
                    | "name"
                  span.p
                    | )

              p
                | After creating the index, you can use it in the
                code orderBy
                | command to fetch an alphabetized list of names:

              .highlight
                pre
                  code.javascript.language-javascript data-lang='javascript'
                    span.nx
                      |  r
                    span.p
                      | .
                    span.nx
                      | table
                    span.p
                      | (
                    span.s2
                      | "beers"
                    span.p
                      | ).
                    span.nx
                      | orderBy
                    span.p
                      | ({
                    span.nx
                      | index
                    span.o
                      | :
                    span.s2
                      | "name"
                    span.p
                      | })

              p
                | When paginating records from a database, you want to be able to obtain a subset of ordered table records. In a conventional SQL environment, you might accomplish that by using
                code OFFSET
                | and
                code LIMIT
                | . RethinkDB's
                code skip
                | and
                code limit
                | commands are serviceable equivalents, but the skip command doesn't offer optimal performance.

              p
                | The
                code between
                | command, which is commonly used to fetch all documents that are between two keys in a table, is a much more efficient way to get the start position of a table subset. You can optionally specify a secondary index when using the
                codebetween
                | command, which means that it can operate on the indexed
                code name
                | property of the
                code beers
                | table.

              p
                | The following example shows how to use the
                code between
                | command on the
                code name
                | index to get all of the beers between "Petrus Speciale" and "Plank Road Pale Ale" in alphabetical order:

              .highlight
                pre
                  code.javascript.language-javascript data-lang='javascript'
                    span.nx
                      | r
                    span.p
                      | .
                    span.nx
                      | table
                    span.p
                      | (
                    span.s2
                      | "beers"
                    span.p
                      | )
                    span.p
                      | .
                    span.nx
                      | between
                    span.p
                      | (
                    span.s2
                      | "Petrus Speciale"
                    span.p
                      | ,
                    span.s2
                      |  "Plank Road Pale Ale"
                    span.p
                      | ,
                    span.p
                      | {
                    span.nx
                      | index
                    span.o
                      | :
                    span.s2
                      | "name"
                    span.p
                      | })
                    span.p
                      | .
                    span.nx
                      | orderBy
                    span.p
                      | ({
                    span.nx
                      | index
                    span.o
                      | :
                    span.s2
                      | "name"
                    span.p
                      | })

              p
                | When the BeerThink application starts, it uses
                code orderBy
                | and
                code limit
                | to fetch the first page of data. To get subsequent pages, it uses the
                code between
                | and
                code limit
                | commands. The value that the program supplies for the
                code between
                | command's start position is simply the index of the very last item that was fetched on the previous page.

              .highlight
                pre
                  code.javascript.language-javascript data-lang='javascript'
                    span.nx
                      | r
                    span.p
                      | .
                    span.nx
                      | table
                    span.p
                      | (
                    span.s2
                      | "beers"
                    span.p
                      | )
                    span.p
                      | .
                    span.nx
                      | between
                    span.p
                      | (
                    span.s2
                      | "Petrus Speciale"
                    span.p
                      | ,
                    span.kc
                      |  null
                    span.p
                      | ,
                    span.p
                      |  {
                    span.nx
                      | leftBound
                    span.o
                      | :
                    span.s2
                      | "open"
                    span.p
                      | ,
                    span.nx
                      | index
                    span.o
                      | :
                    span.s2
                      | "name"
                    span.p
                      | })
                    span.p
                      | .
                    span.nx
                      | orderBy
                    span.p
                      | ({
                    span.nx
                      | index
                    span.o
                      | :
                    span.s2
                      | "name"
                    span.p
                      | }).
                    span.nx
                      | limit
                    span.p
                      | (
                    span.mi
                      | 50
                    span.p
                      | )

              p
                | The example above shows how to fetch 50 records, starting from a particular beer. Because the program doesn't actually know what beer will be at the end of the new page of data, the
                code between
                | command is given
                code null
                | as its closing index value. That will cause the
                code between
                | command to return everything from the start index to the end of the table. The query uses the
                code limit
                | command to get only the desired number of records.

              p
                | Setting the value of the
                code leftBound
                | option to
                code open
                | tells the
                code between
                | command to omit the first record, the one that we use to define the start index. That's useful because the item is one that you already have at the end of your list---you don't want to add it again.

              h3.section-title The slice command

